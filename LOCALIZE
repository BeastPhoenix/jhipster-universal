var $localize = function $localize(messageParts) {
    for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      expressions[_key - 1] = arguments[_key];
    }

    if ($localize.translate) {
      // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.
      var translation = $localize.translate(messageParts, expressions);
      messageParts = translation[0];
      expressions = translation[1];
    }

    var message = stripBlock(messageParts[0], messageParts.raw[0]);

    for (var i = 1; i < messageParts.length; i++) {
      message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);
    }

    return message;
  };


  var BLOCK_MARKER = ':';


  function stripBlock(messagePart, rawMessagePart) {
    return rawMessagePart.charAt(0) === BLOCK_MARKER ? messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) : messagePart;
  }
  /**
   * Find the end of a "marked block" indicated by the first non-escaped colon.
   *
   * @param cooked The cooked string (where escaped chars have been processed)
   * @param raw The raw string (where escape sequences are still in place)
   *
   * @returns the index of the end of block marker
   * @throws an error if the block is unterminated
   */


  function findEndOfBlock(cooked, raw) {
    /***********************************************************************************************
     * This function is repeated in `src/utils/messages.ts` and the two should be kept in sync.
     * The reason is that this file is marked as having side-effects, and if we import `messages.ts`
     * into it, the whole of `src/utils` will be included in this bundle and none of the functions
     * will be tree shaken.
     ***********************************************************************************************/
    for (var cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {
      if (raw[rawIndex] === '\\') {
        rawIndex++;
      } else if (cooked[cookedIndex] === BLOCK_MARKER) {
        return cookedIndex;
      }
    }

    throw new Error("Unterminated $localize metadata block in \"".concat(raw, "\"."));
  }
